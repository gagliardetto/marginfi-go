// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marginfi

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UtpMangoUsePlacePerpOrder is the `utpMangoUsePlacePerpOrder` instruction.
type UtpMangoUsePlacePerpOrder struct {
	Args *UtpMangoPlacePerpOrderArgs

	// [0] = [] marginfiAccount
	//
	// [1] = [] marginfiGroup
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [] mangoAuthority
	//
	// [4] = [WRITE] mangoAccount
	//
	// [5] = [] mangoProgram
	//
	// [6] = [] mangoGroup
	//
	// [7] = [] mangoCache
	//
	// [8] = [WRITE] mangoPerpMarket
	//
	// [9] = [WRITE] mangoBids
	//
	// [10] = [WRITE] mangoAsks
	//
	// [11] = [WRITE] mangoEventQueue
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUtpMangoUsePlacePerpOrderInstructionBuilder creates a new `UtpMangoUsePlacePerpOrder` instruction builder.
func NewUtpMangoUsePlacePerpOrderInstructionBuilder() *UtpMangoUsePlacePerpOrder {
	nd := &UtpMangoUsePlacePerpOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *UtpMangoUsePlacePerpOrder) SetArgs(args UtpMangoPlacePerpOrderArgs) *UtpMangoUsePlacePerpOrder {
	inst.Args = &args
	return inst
}

// SetMarginfiAccount sets the "marginfiAccount" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMarginfiAccount(marginfiAccount ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marginfiAccount)
	return inst
}

// GetMarginfiAccount gets the "marginfiAccount" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMarginfiAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarginfiGroupAccount sets the "marginfiGroup" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMarginfiGroupAccount(marginfiGroup ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(marginfiGroup)
	return inst
}

// GetMarginfiGroupAccount gets the "marginfiGroup" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMarginfiGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UtpMangoUsePlacePerpOrder) SetAuthorityAccount(authority ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UtpMangoUsePlacePerpOrder) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMangoAuthorityAccount sets the "mangoAuthority" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoAuthorityAccount(mangoAuthority ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mangoAuthority)
	return inst
}

// GetMangoAuthorityAccount gets the "mangoAuthority" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMangoAccount sets the "mangoAccount" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoAccount(mangoAccount ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mangoAccount).WRITE()
	return inst
}

// GetMangoAccount gets the "mangoAccount" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMangoProgramAccount sets the "mangoProgram" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoProgramAccount(mangoProgram ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mangoProgram)
	return inst
}

// GetMangoProgramAccount gets the "mangoProgram" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMangoGroupAccount sets the "mangoGroup" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoGroupAccount(mangoGroup ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mangoGroup)
	return inst
}

// GetMangoGroupAccount gets the "mangoGroup" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMangoCacheAccount sets the "mangoCache" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoCacheAccount(mangoCache ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(mangoCache)
	return inst
}

// GetMangoCacheAccount gets the "mangoCache" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoCacheAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMangoPerpMarketAccount sets the "mangoPerpMarket" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoPerpMarketAccount(mangoPerpMarket ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(mangoPerpMarket).WRITE()
	return inst
}

// GetMangoPerpMarketAccount gets the "mangoPerpMarket" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoPerpMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMangoBidsAccount sets the "mangoBids" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoBidsAccount(mangoBids ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(mangoBids).WRITE()
	return inst
}

// GetMangoBidsAccount gets the "mangoBids" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMangoAsksAccount sets the "mangoAsks" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoAsksAccount(mangoAsks ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(mangoAsks).WRITE()
	return inst
}

// GetMangoAsksAccount gets the "mangoAsks" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMangoEventQueueAccount sets the "mangoEventQueue" account.
func (inst *UtpMangoUsePlacePerpOrder) SetMangoEventQueueAccount(mangoEventQueue ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(mangoEventQueue).WRITE()
	return inst
}

// GetMangoEventQueueAccount gets the "mangoEventQueue" account.
func (inst *UtpMangoUsePlacePerpOrder) GetMangoEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst UtpMangoUsePlacePerpOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UtpMangoUsePlacePerpOrder,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UtpMangoUsePlacePerpOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UtpMangoUsePlacePerpOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarginfiAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MarginfiGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MangoAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MangoAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MangoProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MangoGroup is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MangoCache is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MangoPerpMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MangoBids is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MangoAsks is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MangoEventQueue is not set")
		}
	}
	return nil
}

func (inst *UtpMangoUsePlacePerpOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UtpMangoUsePlacePerpOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       marginfi", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  marginfiGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" mangoAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          mango", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   mangoProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     mangoGroup", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     mangoCache", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("mangoPerpMarket", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("      mangoBids", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      mangoAsks", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("mangoEventQueue", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj UtpMangoUsePlacePerpOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UtpMangoUsePlacePerpOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewUtpMangoUsePlacePerpOrderInstruction declares a new UtpMangoUsePlacePerpOrder instruction with the provided parameters and accounts.
func NewUtpMangoUsePlacePerpOrderInstruction(
	// Parameters:
	args UtpMangoPlacePerpOrderArgs,
	// Accounts:
	marginfiAccount ag_solanago.PublicKey,
	marginfiGroup ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	mangoAuthority ag_solanago.PublicKey,
	mangoAccount ag_solanago.PublicKey,
	mangoProgram ag_solanago.PublicKey,
	mangoGroup ag_solanago.PublicKey,
	mangoCache ag_solanago.PublicKey,
	mangoPerpMarket ag_solanago.PublicKey,
	mangoBids ag_solanago.PublicKey,
	mangoAsks ag_solanago.PublicKey,
	mangoEventQueue ag_solanago.PublicKey) *UtpMangoUsePlacePerpOrder {
	return NewUtpMangoUsePlacePerpOrderInstructionBuilder().
		SetArgs(args).
		SetMarginfiAccount(marginfiAccount).
		SetMarginfiGroupAccount(marginfiGroup).
		SetAuthorityAccount(authority).
		SetMangoAuthorityAccount(mangoAuthority).
		SetMangoAccount(mangoAccount).
		SetMangoProgramAccount(mangoProgram).
		SetMangoGroupAccount(mangoGroup).
		SetMangoCacheAccount(mangoCache).
		SetMangoPerpMarketAccount(mangoPerpMarket).
		SetMangoBidsAccount(mangoBids).
		SetMangoAsksAccount(mangoAsks).
		SetMangoEventQueueAccount(mangoEventQueue)
}
