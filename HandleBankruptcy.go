// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marginfi

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// HandleBankruptcy is the `handleBankruptcy` instruction.
type HandleBankruptcy struct {

	// [0] = [WRITE] marginfiAccount
	//
	// [1] = [WRITE] marginfiGroup
	//
	// [2] = [] insuranceVaultAuthority
	//
	// [3] = [WRITE] insuranceVault
	//
	// [4] = [WRITE] liquidityVault
	//
	// [5] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewHandleBankruptcyInstructionBuilder creates a new `HandleBankruptcy` instruction builder.
func NewHandleBankruptcyInstructionBuilder() *HandleBankruptcy {
	nd := &HandleBankruptcy{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetMarginfiAccount sets the "marginfiAccount" account.
func (inst *HandleBankruptcy) SetMarginfiAccount(marginfiAccount ag_solanago.PublicKey) *HandleBankruptcy {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marginfiAccount).WRITE()
	return inst
}

// GetMarginfiAccount gets the "marginfiAccount" account.
func (inst *HandleBankruptcy) GetMarginfiAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarginfiGroupAccount sets the "marginfiGroup" account.
func (inst *HandleBankruptcy) SetMarginfiGroupAccount(marginfiGroup ag_solanago.PublicKey) *HandleBankruptcy {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(marginfiGroup).WRITE()
	return inst
}

// GetMarginfiGroupAccount gets the "marginfiGroup" account.
func (inst *HandleBankruptcy) GetMarginfiGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetInsuranceVaultAuthorityAccount sets the "insuranceVaultAuthority" account.
func (inst *HandleBankruptcy) SetInsuranceVaultAuthorityAccount(insuranceVaultAuthority ag_solanago.PublicKey) *HandleBankruptcy {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(insuranceVaultAuthority)
	return inst
}

// GetInsuranceVaultAuthorityAccount gets the "insuranceVaultAuthority" account.
func (inst *HandleBankruptcy) GetInsuranceVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetInsuranceVaultAccount sets the "insuranceVault" account.
func (inst *HandleBankruptcy) SetInsuranceVaultAccount(insuranceVault ag_solanago.PublicKey) *HandleBankruptcy {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(insuranceVault).WRITE()
	return inst
}

// GetInsuranceVaultAccount gets the "insuranceVault" account.
func (inst *HandleBankruptcy) GetInsuranceVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLiquidityVaultAccount sets the "liquidityVault" account.
func (inst *HandleBankruptcy) SetLiquidityVaultAccount(liquidityVault ag_solanago.PublicKey) *HandleBankruptcy {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(liquidityVault).WRITE()
	return inst
}

// GetLiquidityVaultAccount gets the "liquidityVault" account.
func (inst *HandleBankruptcy) GetLiquidityVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *HandleBankruptcy) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *HandleBankruptcy {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *HandleBankruptcy) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst HandleBankruptcy) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_HandleBankruptcy,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst HandleBankruptcy) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *HandleBankruptcy) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarginfiAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MarginfiGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.InsuranceVaultAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.InsuranceVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LiquidityVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *HandleBankruptcy) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("HandleBankruptcy")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               marginfi", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          marginfiGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("insuranceVaultAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         insuranceVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         liquidityVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj HandleBankruptcy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *HandleBankruptcy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewHandleBankruptcyInstruction declares a new HandleBankruptcy instruction with the provided parameters and accounts.
func NewHandleBankruptcyInstruction(
	// Accounts:
	marginfiAccount ag_solanago.PublicKey,
	marginfiGroup ag_solanago.PublicKey,
	insuranceVaultAuthority ag_solanago.PublicKey,
	insuranceVault ag_solanago.PublicKey,
	liquidityVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *HandleBankruptcy {
	return NewHandleBankruptcyInstructionBuilder().
		SetMarginfiAccount(marginfiAccount).
		SetMarginfiGroupAccount(marginfiGroup).
		SetInsuranceVaultAuthorityAccount(insuranceVaultAuthority).
		SetInsuranceVaultAccount(insuranceVault).
		SetLiquidityVaultAccount(liquidityVault).
		SetTokenProgramAccount(tokenProgram)
}
