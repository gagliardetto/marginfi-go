// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marginfi

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UtpMangoActivate is the `utpMangoActivate` instruction.
type UtpMangoActivate struct {
	AuthoritySeed *ag_solanago.PublicKey
	AuthorityBump *uint8

	// [0] = [WRITE] marginfiAccount
	//
	// [1] = [] marginfiGroup
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [WRITE] mangoAuthority
	//
	// [4] = [WRITE] mangoAccount
	//
	// [5] = [] mangoProgram
	//
	// [6] = [WRITE] mangoGroup
	//
	// [7] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUtpMangoActivateInstructionBuilder creates a new `UtpMangoActivate` instruction builder.
func NewUtpMangoActivateInstructionBuilder() *UtpMangoActivate {
	nd := &UtpMangoActivate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetAuthoritySeed sets the "authoritySeed" parameter.
func (inst *UtpMangoActivate) SetAuthoritySeed(authoritySeed ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AuthoritySeed = &authoritySeed
	return inst
}

// SetAuthorityBump sets the "authorityBump" parameter.
func (inst *UtpMangoActivate) SetAuthorityBump(authorityBump uint8) *UtpMangoActivate {
	inst.AuthorityBump = &authorityBump
	return inst
}

// SetMarginfiAccount sets the "marginfiAccount" account.
func (inst *UtpMangoActivate) SetMarginfiAccount(marginfiAccount ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marginfiAccount).WRITE()
	return inst
}

// GetMarginfiAccount gets the "marginfiAccount" account.
func (inst *UtpMangoActivate) GetMarginfiAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarginfiGroupAccount sets the "marginfiGroup" account.
func (inst *UtpMangoActivate) SetMarginfiGroupAccount(marginfiGroup ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(marginfiGroup)
	return inst
}

// GetMarginfiGroupAccount gets the "marginfiGroup" account.
func (inst *UtpMangoActivate) GetMarginfiGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UtpMangoActivate) SetAuthorityAccount(authority ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UtpMangoActivate) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMangoAuthorityAccount sets the "mangoAuthority" account.
func (inst *UtpMangoActivate) SetMangoAuthorityAccount(mangoAuthority ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mangoAuthority).WRITE()
	return inst
}

// GetMangoAuthorityAccount gets the "mangoAuthority" account.
func (inst *UtpMangoActivate) GetMangoAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMangoAccount sets the "mangoAccount" account.
func (inst *UtpMangoActivate) SetMangoAccount(mangoAccount ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mangoAccount).WRITE()
	return inst
}

// GetMangoAccount gets the "mangoAccount" account.
func (inst *UtpMangoActivate) GetMangoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMangoProgramAccount sets the "mangoProgram" account.
func (inst *UtpMangoActivate) SetMangoProgramAccount(mangoProgram ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mangoProgram)
	return inst
}

// GetMangoProgramAccount gets the "mangoProgram" account.
func (inst *UtpMangoActivate) GetMangoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMangoGroupAccount sets the "mangoGroup" account.
func (inst *UtpMangoActivate) SetMangoGroupAccount(mangoGroup ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mangoGroup).WRITE()
	return inst
}

// GetMangoGroupAccount gets the "mangoGroup" account.
func (inst *UtpMangoActivate) GetMangoGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UtpMangoActivate) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UtpMangoActivate {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UtpMangoActivate) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst UtpMangoActivate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UtpMangoActivate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UtpMangoActivate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UtpMangoActivate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AuthoritySeed == nil {
			return errors.New("AuthoritySeed parameter is not set")
		}
		if inst.AuthorityBump == nil {
			return errors.New("AuthorityBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarginfiAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MarginfiGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MangoAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MangoAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MangoProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MangoGroup is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UtpMangoActivate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UtpMangoActivate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("AuthoritySeed", *inst.AuthoritySeed))
						paramsBranch.Child(ag_format.Param("AuthorityBump", *inst.AuthorityBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      marginfi", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" marginfiGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("mangoAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         mango", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  mangoProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    mangoGroup", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj UtpMangoActivate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AuthoritySeed` param:
	err = encoder.Encode(obj.AuthoritySeed)
	if err != nil {
		return err
	}
	// Serialize `AuthorityBump` param:
	err = encoder.Encode(obj.AuthorityBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UtpMangoActivate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AuthoritySeed`:
	err = decoder.Decode(&obj.AuthoritySeed)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityBump`:
	err = decoder.Decode(&obj.AuthorityBump)
	if err != nil {
		return err
	}
	return nil
}

// NewUtpMangoActivateInstruction declares a new UtpMangoActivate instruction with the provided parameters and accounts.
func NewUtpMangoActivateInstruction(
	// Parameters:
	authoritySeed ag_solanago.PublicKey,
	authorityBump uint8,
	// Accounts:
	marginfiAccount ag_solanago.PublicKey,
	marginfiGroup ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	mangoAuthority ag_solanago.PublicKey,
	mangoAccount ag_solanago.PublicKey,
	mangoProgram ag_solanago.PublicKey,
	mangoGroup ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UtpMangoActivate {
	return NewUtpMangoActivateInstructionBuilder().
		SetAuthoritySeed(authoritySeed).
		SetAuthorityBump(authorityBump).
		SetMarginfiAccount(marginfiAccount).
		SetMarginfiGroupAccount(marginfiGroup).
		SetAuthorityAccount(authority).
		SetMangoAuthorityAccount(mangoAuthority).
		SetMangoAccount(mangoAccount).
		SetMangoProgramAccount(mangoProgram).
		SetMangoGroupAccount(mangoGroup).
		SetSystemProgramAccount(systemProgram)
}
