// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marginfi

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type MarginfiAccount struct {
	Authority        ag_solanago.PublicKey
	MarginfiGroup    ag_solanago.PublicKey
	DepositRecord    MDecimal
	BorrowRecord     MDecimal
	ActiveUtps       [32]bool
	UtpAccountConfig [32]UTPAccountConfig
	ReservedSpace    [256]ag_binary.Uint128
}

var MarginfiAccountDiscriminator = [8]byte{67, 178, 130, 109, 126, 114, 28, 42}

func (obj MarginfiAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MarginfiAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `MarginfiGroup` param:
	err = encoder.Encode(obj.MarginfiGroup)
	if err != nil {
		return err
	}
	// Serialize `DepositRecord` param:
	err = encoder.Encode(obj.DepositRecord)
	if err != nil {
		return err
	}
	// Serialize `BorrowRecord` param:
	err = encoder.Encode(obj.BorrowRecord)
	if err != nil {
		return err
	}
	// Serialize `ActiveUtps` param:
	err = encoder.Encode(obj.ActiveUtps)
	if err != nil {
		return err
	}
	// Serialize `UtpAccountConfig` param:
	err = encoder.Encode(obj.UtpAccountConfig)
	if err != nil {
		return err
	}
	// Serialize `ReservedSpace` param:
	err = encoder.Encode(obj.ReservedSpace)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarginfiAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MarginfiAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[67 178 130 109 126 114 28 42]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `MarginfiGroup`:
	err = decoder.Decode(&obj.MarginfiGroup)
	if err != nil {
		return err
	}
	// Deserialize `DepositRecord`:
	err = decoder.Decode(&obj.DepositRecord)
	if err != nil {
		return err
	}
	// Deserialize `BorrowRecord`:
	err = decoder.Decode(&obj.BorrowRecord)
	if err != nil {
		return err
	}
	// Deserialize `ActiveUtps`:
	err = decoder.Decode(&obj.ActiveUtps)
	if err != nil {
		return err
	}
	// Deserialize `UtpAccountConfig`:
	err = decoder.Decode(&obj.UtpAccountConfig)
	if err != nil {
		return err
	}
	// Deserialize `ReservedSpace`:
	err = decoder.Decode(&obj.ReservedSpace)
	if err != nil {
		return err
	}
	return nil
}

type MarginfiGroup struct {
	Admin         ag_solanago.PublicKey
	Bank          Bank
	Paused        bool
	ReservedSpace [384]ag_binary.Uint128
}

var MarginfiGroupDiscriminator = [8]byte{182, 23, 173, 240, 151, 206, 182, 67}

func (obj MarginfiGroup) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MarginfiGroupDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `Bank` param:
	err = encoder.Encode(obj.Bank)
	if err != nil {
		return err
	}
	// Serialize `Paused` param:
	err = encoder.Encode(obj.Paused)
	if err != nil {
		return err
	}
	// Serialize `ReservedSpace` param:
	err = encoder.Encode(obj.ReservedSpace)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarginfiGroup) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MarginfiGroupDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[182 23 173 240 151 206 182 67]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `Bank`:
	err = decoder.Decode(&obj.Bank)
	if err != nil {
		return err
	}
	// Deserialize `Paused`:
	err = decoder.Decode(&obj.Paused)
	if err != nil {
		return err
	}
	// Deserialize `ReservedSpace`:
	err = decoder.Decode(&obj.ReservedSpace)
	if err != nil {
		return err
	}
	return nil
}

type State struct {
	TotalCollateral        ag_binary.Uint128
	FreeCollateral         ag_binary.Uint128
	MarginRequirementInit  ag_binary.Uint128
	MarginRequirementMaint ag_binary.Uint128
	Equity                 ag_binary.Uint128
}

var StateDiscriminator = [8]byte{216, 146, 107, 94, 104, 75, 182, 177}

func (obj State) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TotalCollateral` param:
	err = encoder.Encode(obj.TotalCollateral)
	if err != nil {
		return err
	}
	// Serialize `FreeCollateral` param:
	err = encoder.Encode(obj.FreeCollateral)
	if err != nil {
		return err
	}
	// Serialize `MarginRequirementInit` param:
	err = encoder.Encode(obj.MarginRequirementInit)
	if err != nil {
		return err
	}
	// Serialize `MarginRequirementMaint` param:
	err = encoder.Encode(obj.MarginRequirementMaint)
	if err != nil {
		return err
	}
	// Serialize `Equity` param:
	err = encoder.Encode(obj.Equity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *State) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[216 146 107 94 104 75 182 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TotalCollateral`:
	err = decoder.Decode(&obj.TotalCollateral)
	if err != nil {
		return err
	}
	// Deserialize `FreeCollateral`:
	err = decoder.Decode(&obj.FreeCollateral)
	if err != nil {
		return err
	}
	// Deserialize `MarginRequirementInit`:
	err = decoder.Decode(&obj.MarginRequirementInit)
	if err != nil {
		return err
	}
	// Deserialize `MarginRequirementMaint`:
	err = decoder.Decode(&obj.MarginRequirementMaint)
	if err != nil {
		return err
	}
	// Deserialize `Equity`:
	err = decoder.Decode(&obj.Equity)
	if err != nil {
		return err
	}
	return nil
}
