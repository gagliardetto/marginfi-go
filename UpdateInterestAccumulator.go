// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marginfi

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateInterestAccumulator is the `updateInterestAccumulator` instruction.
type UpdateInterestAccumulator struct {

	// [0] = [WRITE] marginfiGroup
	//
	// [1] = [WRITE] bankVault
	//
	// [2] = [] bankAuthority
	//
	// [3] = [WRITE] bankFeeVault
	//
	// [4] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateInterestAccumulatorInstructionBuilder creates a new `UpdateInterestAccumulator` instruction builder.
func NewUpdateInterestAccumulatorInstructionBuilder() *UpdateInterestAccumulator {
	nd := &UpdateInterestAccumulator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetMarginfiGroupAccount sets the "marginfiGroup" account.
func (inst *UpdateInterestAccumulator) SetMarginfiGroupAccount(marginfiGroup ag_solanago.PublicKey) *UpdateInterestAccumulator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marginfiGroup).WRITE()
	return inst
}

// GetMarginfiGroupAccount gets the "marginfiGroup" account.
func (inst *UpdateInterestAccumulator) GetMarginfiGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBankVaultAccount sets the "bankVault" account.
func (inst *UpdateInterestAccumulator) SetBankVaultAccount(bankVault ag_solanago.PublicKey) *UpdateInterestAccumulator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(bankVault).WRITE()
	return inst
}

// GetBankVaultAccount gets the "bankVault" account.
func (inst *UpdateInterestAccumulator) GetBankVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBankAuthorityAccount sets the "bankAuthority" account.
func (inst *UpdateInterestAccumulator) SetBankAuthorityAccount(bankAuthority ag_solanago.PublicKey) *UpdateInterestAccumulator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(bankAuthority)
	return inst
}

// GetBankAuthorityAccount gets the "bankAuthority" account.
func (inst *UpdateInterestAccumulator) GetBankAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBankFeeVaultAccount sets the "bankFeeVault" account.
func (inst *UpdateInterestAccumulator) SetBankFeeVaultAccount(bankFeeVault ag_solanago.PublicKey) *UpdateInterestAccumulator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bankFeeVault).WRITE()
	return inst
}

// GetBankFeeVaultAccount gets the "bankFeeVault" account.
func (inst *UpdateInterestAccumulator) GetBankFeeVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *UpdateInterestAccumulator) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *UpdateInterestAccumulator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *UpdateInterestAccumulator) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst UpdateInterestAccumulator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateInterestAccumulator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateInterestAccumulator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateInterestAccumulator) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarginfiGroup is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.BankVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BankAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BankFeeVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *UpdateInterestAccumulator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateInterestAccumulator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("marginfiGroup", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    bankVault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("bankAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" bankFeeVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj UpdateInterestAccumulator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *UpdateInterestAccumulator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewUpdateInterestAccumulatorInstruction declares a new UpdateInterestAccumulator instruction with the provided parameters and accounts.
func NewUpdateInterestAccumulatorInstruction(
	// Accounts:
	marginfiGroup ag_solanago.PublicKey,
	bankVault ag_solanago.PublicKey,
	bankAuthority ag_solanago.PublicKey,
	bankFeeVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *UpdateInterestAccumulator {
	return NewUpdateInterestAccumulatorInstructionBuilder().
		SetMarginfiGroupAccount(marginfiGroup).
		SetBankVaultAccount(bankVault).
		SetBankAuthorityAccount(bankAuthority).
		SetBankFeeVaultAccount(bankFeeVault).
		SetTokenProgramAccount(tokenProgram)
}
