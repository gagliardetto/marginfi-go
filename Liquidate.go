// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marginfi

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Liquidate is the `liquidate` instruction.
type Liquidate struct {
	UtpIndex *uint64

	// [0] = [WRITE] marginfiAccount
	//
	// [1] = [WRITE] marginfiGroup
	//
	// [2] = [WRITE, SIGNER] signer
	//
	// [3] = [WRITE] marginfiAccountLiquidatee
	//
	// [4] = [WRITE] bankVault
	//
	// [5] = [] bankAuthority
	//
	// [6] = [WRITE] bankInsuranceVault
	//
	// [7] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewLiquidateInstructionBuilder creates a new `Liquidate` instruction builder.
func NewLiquidateInstructionBuilder() *Liquidate {
	nd := &Liquidate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetUtpIndex sets the "utpIndex" parameter.
func (inst *Liquidate) SetUtpIndex(utpIndex uint64) *Liquidate {
	inst.UtpIndex = &utpIndex
	return inst
}

// SetMarginfiAccount sets the "marginfiAccount" account.
func (inst *Liquidate) SetMarginfiAccount(marginfiAccount ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marginfiAccount).WRITE()
	return inst
}

// GetMarginfiAccount gets the "marginfiAccount" account.
func (inst *Liquidate) GetMarginfiAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarginfiGroupAccount sets the "marginfiGroup" account.
func (inst *Liquidate) SetMarginfiGroupAccount(marginfiGroup ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(marginfiGroup).WRITE()
	return inst
}

// GetMarginfiGroupAccount gets the "marginfiGroup" account.
func (inst *Liquidate) GetMarginfiGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSignerAccount sets the "signer" account.
func (inst *Liquidate) SetSignerAccount(signer ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *Liquidate) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMarginfiAccountLiquidateeAccount sets the "marginfiAccountLiquidatee" account.
func (inst *Liquidate) SetMarginfiAccountLiquidateeAccount(marginfiAccountLiquidatee ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(marginfiAccountLiquidatee).WRITE()
	return inst
}

// GetMarginfiAccountLiquidateeAccount gets the "marginfiAccountLiquidatee" account.
func (inst *Liquidate) GetMarginfiAccountLiquidateeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBankVaultAccount sets the "bankVault" account.
func (inst *Liquidate) SetBankVaultAccount(bankVault ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bankVault).WRITE()
	return inst
}

// GetBankVaultAccount gets the "bankVault" account.
func (inst *Liquidate) GetBankVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBankAuthorityAccount sets the "bankAuthority" account.
func (inst *Liquidate) SetBankAuthorityAccount(bankAuthority ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bankAuthority)
	return inst
}

// GetBankAuthorityAccount gets the "bankAuthority" account.
func (inst *Liquidate) GetBankAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBankInsuranceVaultAccount sets the "bankInsuranceVault" account.
func (inst *Liquidate) SetBankInsuranceVaultAccount(bankInsuranceVault ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(bankInsuranceVault).WRITE()
	return inst
}

// GetBankInsuranceVaultAccount gets the "bankInsuranceVault" account.
func (inst *Liquidate) GetBankInsuranceVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Liquidate) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Liquidate) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst Liquidate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Liquidate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Liquidate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Liquidate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.UtpIndex == nil {
			return errors.New("UtpIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarginfiAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MarginfiGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MarginfiAccountLiquidatee is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BankVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BankAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BankInsuranceVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Liquidate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Liquidate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("UtpIndex", *inst.UtpIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 marginfi", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            marginfiGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                   signer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("marginfiAccountLiquidatee", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                bankVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            bankAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       bankInsuranceVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             tokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj Liquidate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UtpIndex` param:
	err = encoder.Encode(obj.UtpIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Liquidate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UtpIndex`:
	err = decoder.Decode(&obj.UtpIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewLiquidateInstruction declares a new Liquidate instruction with the provided parameters and accounts.
func NewLiquidateInstruction(
	// Parameters:
	utpIndex uint64,
	// Accounts:
	marginfiAccount ag_solanago.PublicKey,
	marginfiGroup ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	marginfiAccountLiquidatee ag_solanago.PublicKey,
	bankVault ag_solanago.PublicKey,
	bankAuthority ag_solanago.PublicKey,
	bankInsuranceVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Liquidate {
	return NewLiquidateInstructionBuilder().
		SetUtpIndex(utpIndex).
		SetMarginfiAccount(marginfiAccount).
		SetMarginfiGroupAccount(marginfiGroup).
		SetSignerAccount(signer).
		SetMarginfiAccountLiquidateeAccount(marginfiAccountLiquidatee).
		SetBankVaultAccount(bankVault).
		SetBankAuthorityAccount(bankAuthority).
		SetBankInsuranceVaultAccount(bankInsuranceVault).
		SetTokenProgramAccount(tokenProgram)
}
