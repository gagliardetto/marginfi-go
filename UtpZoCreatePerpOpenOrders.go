// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package marginfi

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UtpZoCreatePerpOpenOrders is the `utpZoCreatePerpOpenOrders` instruction.
type UtpZoCreatePerpOpenOrders struct {

	// ····· header: [0] = [] marginfiAccount
	//
	// ············· [1] = [] marginfiGroup
	//
	// ············· [2] = [WRITE, SIGNER] signer
	//
	// ············· [3] = [] utpAuthority
	//
	// [4] = [] zoProgram
	//
	// [5] = [] state
	//
	// [6] = [WRITE] stateSigner
	//
	// [7] = [WRITE] margin
	//
	// [8] = [WRITE] control
	//
	// [9] = [WRITE] openOrders
	//
	// [10] = [WRITE] dexMarket
	//
	// [11] = [] dexProgram
	//
	// [12] = [] rent
	//
	// [13] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUtpZoCreatePerpOpenOrdersInstructionBuilder creates a new `UtpZoCreatePerpOpenOrders` instruction builder.
func NewUtpZoCreatePerpOpenOrdersInstructionBuilder() *UtpZoCreatePerpOpenOrders {
	nd := &UtpZoCreatePerpOpenOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

type UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewUtpZoCreatePerpOpenOrdersHeaderAccountsBuilder() *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder {
	return &UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
}

func (inst *UtpZoCreatePerpOpenOrders) SetHeaderAccountsFromBuilder(utpZoCreatePerpOpenOrdersHeaderAccountsBuilder *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[0] = utpZoCreatePerpOpenOrdersHeaderAccountsBuilder.GetMarginfiAccount()
	inst.AccountMetaSlice[1] = utpZoCreatePerpOpenOrdersHeaderAccountsBuilder.GetMarginfiGroupAccount()
	inst.AccountMetaSlice[2] = utpZoCreatePerpOpenOrdersHeaderAccountsBuilder.GetSignerAccount()
	inst.AccountMetaSlice[3] = utpZoCreatePerpOpenOrdersHeaderAccountsBuilder.GetUtpAuthorityAccount()
	return inst
}

// SetMarginfiAccount sets the "marginfiAccount" account.
func (inst *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) SetMarginfiAccount(marginfiAccount ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marginfiAccount)
	return inst
}

// GetMarginfiAccount gets the "marginfiAccount" account.
func (inst *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) GetMarginfiAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarginfiGroupAccount sets the "marginfiGroup" account.
func (inst *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) SetMarginfiGroupAccount(marginfiGroup ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(marginfiGroup)
	return inst
}

// GetMarginfiGroupAccount gets the "marginfiGroup" account.
func (inst *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) GetMarginfiGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSignerAccount sets the "signer" account.
func (inst *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) SetSignerAccount(signer ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUtpAuthorityAccount sets the "utpAuthority" account.
func (inst *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) SetUtpAuthorityAccount(utpAuthority ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(utpAuthority)
	return inst
}

// GetUtpAuthorityAccount gets the "utpAuthority" account.
func (inst *UtpZoCreatePerpOpenOrdersHeaderAccountsBuilder) GetUtpAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetZoProgramAccount sets the "zoProgram" account.
func (inst *UtpZoCreatePerpOpenOrders) SetZoProgramAccount(zoProgram ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(zoProgram)
	return inst
}

// GetZoProgramAccount gets the "zoProgram" account.
func (inst *UtpZoCreatePerpOpenOrders) GetZoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStateAccount sets the "state" account.
func (inst *UtpZoCreatePerpOpenOrders) SetStateAccount(state ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UtpZoCreatePerpOpenOrders) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetStateSignerAccount sets the "stateSigner" account.
func (inst *UtpZoCreatePerpOpenOrders) SetStateSignerAccount(stateSigner ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(stateSigner).WRITE()
	return inst
}

// GetStateSignerAccount gets the "stateSigner" account.
func (inst *UtpZoCreatePerpOpenOrders) GetStateSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMarginAccount sets the "margin" account.
func (inst *UtpZoCreatePerpOpenOrders) SetMarginAccount(margin ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(margin).WRITE()
	return inst
}

// GetMarginAccount gets the "margin" account.
func (inst *UtpZoCreatePerpOpenOrders) GetMarginAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetControlAccount sets the "control" account.
func (inst *UtpZoCreatePerpOpenOrders) SetControlAccount(control ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(control).WRITE()
	return inst
}

// GetControlAccount gets the "control" account.
func (inst *UtpZoCreatePerpOpenOrders) GetControlAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOpenOrdersAccount sets the "openOrders" account.
func (inst *UtpZoCreatePerpOpenOrders) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" account.
func (inst *UtpZoCreatePerpOpenOrders) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetDexMarketAccount sets the "dexMarket" account.
func (inst *UtpZoCreatePerpOpenOrders) SetDexMarketAccount(dexMarket ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(dexMarket).WRITE()
	return inst
}

// GetDexMarketAccount gets the "dexMarket" account.
func (inst *UtpZoCreatePerpOpenOrders) GetDexMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetDexProgramAccount sets the "dexProgram" account.
func (inst *UtpZoCreatePerpOpenOrders) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dexProgram" account.
func (inst *UtpZoCreatePerpOpenOrders) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetRentAccount sets the "rent" account.
func (inst *UtpZoCreatePerpOpenOrders) SetRentAccount(rent ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *UtpZoCreatePerpOpenOrders) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UtpZoCreatePerpOpenOrders) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UtpZoCreatePerpOpenOrders) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst UtpZoCreatePerpOpenOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UtpZoCreatePerpOpenOrders,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UtpZoCreatePerpOpenOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UtpZoCreatePerpOpenOrders) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.HeaderMarginfiAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.HeaderMarginfiGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.HeaderSigner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.HeaderUtpAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ZoProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.StateSigner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Margin is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Control is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.OpenOrders is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.DexMarket is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.DexProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UtpZoCreatePerpOpenOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UtpZoCreatePerpOpenOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     header/marginfi", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("header/marginfiGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       header/signer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" header/utpAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           zoProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("               state", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         stateSigner", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("              margin", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("             control", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          openOrders", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           dexMarket", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("          dexProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj UtpZoCreatePerpOpenOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *UtpZoCreatePerpOpenOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewUtpZoCreatePerpOpenOrdersInstruction declares a new UtpZoCreatePerpOpenOrders instruction with the provided parameters and accounts.
func NewUtpZoCreatePerpOpenOrdersInstruction(
	// Accounts:
	headerMarginfiAccount ag_solanago.PublicKey,
	headerMarginfiGroup ag_solanago.PublicKey,
	headerSigner ag_solanago.PublicKey,
	headerUtpAuthority ag_solanago.PublicKey,
	zoProgram ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	stateSigner ag_solanago.PublicKey,
	margin ag_solanago.PublicKey,
	control ag_solanago.PublicKey,
	openOrders ag_solanago.PublicKey,
	dexMarket ag_solanago.PublicKey,
	dexProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UtpZoCreatePerpOpenOrders {
	return NewUtpZoCreatePerpOpenOrdersInstructionBuilder().
		SetHeaderAccountsFromBuilder(
			NewUtpZoCreatePerpOpenOrdersHeaderAccountsBuilder().
				SetMarginfiAccount(headerMarginfiAccount).
				SetMarginfiGroupAccount(headerMarginfiGroup).
				SetSignerAccount(headerSigner).
				SetUtpAuthorityAccount(headerUtpAuthority),
		).
		SetZoProgramAccount(zoProgram).
		SetStateAccount(state).
		SetStateSignerAccount(stateSigner).
		SetMarginAccount(margin).
		SetControlAccount(control).
		SetOpenOrdersAccount(openOrders).
		SetDexMarketAccount(dexMarket).
		SetDexProgramAccount(dexProgram).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram)
}
